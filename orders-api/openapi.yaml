openapi: 3.0.3
info:
  title: Orders API
  version: "1.0.0"
  description: >
    API para gestión de órdenes y productos.  
    Incluye creación, confirmación (idempotente con `X-Idempotency-Key`), cancelación con reglas, y sincronización con Customers API.
servers:
  - url: http://localhost:3001/api 

paths:
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: Ok

  # ------------------- PRODUCTS -------------------
  /products:
    get:
      summary: Listar productos
      parameters:
        - name: search
          in: query
          schema: { type: string }
          description: Buscar por nombre o SKU.
        - name: cursor
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
      responses:
        "200":
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Product' }

    post:
      summary: Crear producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        "201":
          description: Producto creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        "400":
          description: Datos inválidos o SKU duplicado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /products/{id}:
    get:
      summary: Obtener producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Producto encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

    patch:
      summary: Actualizar producto (precio/stock/nombre)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        "200":
          description: Producto actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  # ------------------- ORDERS -------------------
  /orders:
    post:
      summary: Crear orden
      description: >
        Crea una orden para un cliente existente (validado con Customers API).  
        Verifica stock, calcula totales y crea en estado `CREATED`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        "201":
          description: Orden creada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderResponse' }
        "400":
          description: Payload inválido o stock insuficiente
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

    get:
      summary: Listar órdenes
      description: >
        Filtra órdenes por estado, rango de fechas y paginación.
      parameters:
        - name: status
          in: query
          schema: { type: string, enum: [CREATED, CONFIRMED, CANCELED] }
        - name: from
          in: query
          schema: { type: string, format: date-time }
        - name: to
          in: query
          schema: { type: string, format: date-time }
        - name: cursor
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
      responses:
        "200":
          description: Lista de órdenes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OrderResponse' }

  /orders/{id}:
    get:
      summary: Obtener orden con ítems
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Orden encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        "404":
          description: No encontrada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /orders/{id}/confirm:
    post:
      summary: Confirmar orden (idempotente)
      description: >
        Confirma una orden idempotentemente.  
        Enviar `X-Idempotency-Key` para que reintentos devuelvan la misma respuesta.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
        - name: X-Idempotency-Key
          in: header
          required: true
          schema: { type: string }
          description: Clave idempotente.
      responses:
        "200":
          description: Orden confirmada (o ya confirmada)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderResponse' }
        "400":
          description: Error o key duplicada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /orders/{id}/cancel:
    post:
      summary: Cancelar orden
      description: >
        Cancela una orden.  
        - `CREATED`: cancela y restaura stock.  
        - `CONFIRMED`: puede cancelarse dentro de los 10 minutos posteriores.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Orden cancelada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderResponse' }
        "400":
          description: Demasiado tarde para cancelar o error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

components:
  schemas:
    # ---------- PRODUCT ----------
    Product:
      type: object
      properties:
        id: { type: integer }
        sku: { type: string }
        name: { type: string }
        price_cents: { type: integer }
        stock: { type: integer }
        created_at: { type: string, format: date-time }

    CreateProductRequest:
      type: object
      required: [sku, name, price_cents]
      properties:
        sku: { type: string }
        name: { type: string }
        price_cents: { type: integer }
        stock: { type: integer, default: 0 }

    UpdateProductRequest:
      type: object
      properties:
        name: { type: string }
        price_cents: { type: integer }
        stock: { type: integer }

    # ---------- ORDER ----------
    CreateOrderRequest:
      type: object
      required: [customer_id, items]
      properties:
        customer_id:
          type: integer
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      required: [product_id, qty]
      properties:
        product_id:
          type: integer
        qty:
          type: integer
          minimum: 1

    OrderResponse:
      type: object
      properties:
        id: { type: integer }
        status:
          type: string
          enum: [CREATED, CONFIRMED, CANCELED]
        total_cents: { type: integer }
        created_at: { type: string, format: date-time }

    OrderDetail:
      allOf:
        - $ref: '#/components/schemas/OrderResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrderItemDetail'

    OrderItemDetail:
      type: object
      properties:
        product_id: { type: integer }
        qty: { type: integer }
        unit_price_cents: { type: integer }
        subtotal_cents: { type: integer }

    Error:
      type: object
      properties:
        error: { type: string }
